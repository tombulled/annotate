name: CD

on:
  push:
    branches: [main]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Restore Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: pip-

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Install Dependencies
        run: pip install poetry black

      - name: Extract Project Metadata
        id: project
        run: |
          project_name="$(poetry version | cut -d ' ' -f 1)"
          project_version="$(poetry version --short)"

          echo "project.name: '$project_name'"
          echo "project.version: '$project_version'"

          echo ::set-output name=name::$project_name
          echo ::set-output name=version::$project_version

      - name: Format Code
        id: formatting
        run: |
          echo ::set-output name=changes::$(black --check --quiet annotate; echo $?)
          black ${{ steps.project.outputs.name }}

      - name: Commmit - Code Formatting
        if: steps.formatting.outputs.changes != 0
        run: |
          git add --all
          git commit -m "ðŸŽ¨ Code Formatting"

      - name: Bump Version
        id: bump
        run: |
          poetry version patch
          echo ::set-output name=version::$(poetry version --short)

      - name: Commit - Version Bump
        run: |
          git add --all
          git commit -m "ðŸ”– Bump Version: ${{ steps.project.outputs.version }} -> ${{ steps.bump.outputs.version }}"

      - name: Git Push
        run: git push

      - name: Poetry Build
        run: poetry build
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          generate_release_notes: true
          files: |
            dist/${{ steps.project.outputs.name }}-${{ steps.bump.outputs.version }}.tar.gz
            dist/${{ steps.project.outputs.name }}-${{ steps.bump.outputs.version }}-py3-none-any.whl

      - name: Publish to PyPI
        run: echo "Publish to PyPI here..."